@startuml PST Stat Class Diagram
allow_mixing

package ska::pst::common 
{
  class ApplicationManager <<abstract>>
  class FileSegmentProducer
}

package ska::pst::smrb 
{
  class SmrbSegmentProducer
}

class StatApplicationManager {
  + StatApplicationManager()
  + ~StatApplicationManager()
  + perform_configure_beam(config: AsciiHeader)
  + perform_configure_scan(config: AsciiHeader)
  + perform_start_scan()
  + perform_scan()
  + perform_end_scan()
  + perform_deconfigure_scan()
  + perform_deconfigure_beam()
  - processor: StatProcessor
  - producer: SmrbSegmentProducer
}

class FileProcessor {
  + FileProcessor(config: AsciiHeader)
  + ~FileProcessor()
  + process()
  - processor: StatProcessor
  - reader: FileSegmentProducer
}

class StatProcessor {
  + StatProcessor(data_config: AsciiHeader, weights_config: AsciiHeader)
  + ~StatProcessor()
  + process(segment: SegmentProducer::Segment)
  - storage: StatStorage
  - computer: StatComputer
  - writer: StatPublisher
  - config: AsciiHeader
}

class StatComputer {
  + StatComputer(data_config: AsciiHeader, weights_config: AsciiHeader, storage: StatStorage)
  + ~StatComputer()
  + compute(segment: SegmentProducer::Segment)
  + initialise()
  - storage: StatStorage
  - config: AsciiHeader
}

class StatStorage {
  + StatStorage(config: AsciiHeader)
  + resize(uint32_t ntime_bins, uint32_t nfreq_bins)
  + reset()
  + uint32_t get_npol()
  + uint32_t get_ndim()
  + uint32_t get_nchan()
  + uint32_t get_nbin()
  + uint32_t get_nrebin()
  + uint32_t get_ntime_bins()
  + uint32_t get_nfreq_bins()
  + uint32_t get_ntime_vals()
  + bool is_storage_resized()
  + bool is_storage_reset()
  + mean_frequency_avg: std::vector<std::vector<float>>
  + mean_frequency_avg_masked: std::vector<std::vector<float>>
  + variance_frequency_avg: std::vector<std::vector<float>>
  + variance_frequency_avg_masked: std::vector<std::vector<float>>
  + mean_spectrum: std::vector<std::vector<std::vector<float>>>
  + variance_spectrum: std::vector<std::vector<std::vector<float>>>
  + mean_spectral_power: std::vector<std::vector<float>>
  + maximum_spectral_power: std::vector<std::vector<float>>
  + histogram_1d_freq_avg: std::vector<std::vector<std::vector<uint32_t>>>
  + histogram_1d_freq_avg_masked: std::vector<std::vector<std::vector<uint32_t>>>
  + rebinned_histogram_2d_freq_avg: std::vector<std::vector<std::vector<uint32_t>>>
  + rebinned_histogram_2d_freq_avg_masked: std::vector<std::vector<std::vector<uint32_t>>>
  + rebinned_histogram_1d_freq_avg: std::vector<std::vector<std::vector<uint32_t>>>
  + rebinned_histogram_1d_freq_avg_masked: std::vector<std::vector<std::vector<uint32_t>>>
  + num_clipped_samples_spectrum: std::vector<std::vector<std::vector<uint32_t>>>
  + num_clipped_samples: std::vector<std::vector<uint32_t>>
  + spectrogram: std::vector<std::vector<std::vector<float>>>
  + timeseries: std::vector<std::vector<std::vector<float>>>
  + timeseries_masked: std::vector<std::vector<std::vector<float>>>
  + rfi_mask_lut: std::vector<bool>
}

class StatPublisher <<abstract>> {
  # storage: std::shared_ptr<StatStorage>
  # config: AsciiHeader
  + StatPublisher(config: AsciiHeader, storage: std::shared_ptr<StatStorage>)
  + ~StatPublisher()
  {abstract} + publish()
}

class StatHdf5FileWriter implements StatPublisher {
  + StatHdf5FileWriter(config: AsciiHeader, storage: std::shared_ptr<StatStorage>)
  + ~StatHdf5FileWriter()
  + publish()
}

StatProcessor *-- StatComputer
StatProcessor *-- StatPublisher
StatProcessor o-- StatStorage
StatComputer o-- StatStorage
StatPublisher o-- StatStorage

ApplicationManager <|-- StatApplicationManager
StatApplicationManager o- SmrbSegmentProducer
StatApplicationManager *-- StatProcessor

FileProcessor *-- StatProcessor
FileProcessor o- FileSegmentProducer

component ska_pst_stat_core
ska_pst_stat_core -- "uses" StatApplicationManager
component ska_pst_stat_file_processor
ska_pst_stat_file_processor -- "uses" FileProcessor

@enduml
